(load "../marm-v2/init.repl")

;  (begin-tx "Load in the nft environment")

;  (env-keys ["ku-admin" "ku-ops" "creatorGuard"])
;  (env-data
;    {
;      "ku-admin": {
;        "keys": [
;          "ku-admin"
;        ],
;        "pred": "keys-any"
;      },
;      "ku-ops": {
;        "keys": [
;          "ku-ops"
;        ],
;        "pred": "keys-any"
;      },
;      "ku-bank": {
;        "keys": [
;          "ku-bank"
;        ],
;        "pred": "keys-all"
;      },
;      "bank-guard": {
;        "keys": [
;          "ku-admin"
;        ],
;        "pred": "keys-all"
;      },
;      "creatorGuard": {
;          "keys": [ "creatorGuard" ],
;          "pred": "keys-any"
;        },
;      "collection": {
;        "name": "test-collection",
;        "totalSupply": 15.0,
;        "provenance": "abc",
;        "category": "Artwork",
;        "creator": "bob",
;        "creatorGuard": {
;          "keys": [ "creatorGuard" ],
;          "pred": "keys-any"
;        },
;        "description": "test-description",
;        "tiers": [
;           {
;            "tierId": "public",
;            "tierType": "PUBLIC",
;            "startTime": {"time": "2023-01-03T00:00:00Z"},
;            "endTime": {"time": "2024-01-03T00:00:00Z"},
;            "cost": 50.0,
;            "limit": -1.0
;          }
;        ]
;      },
;      "collection-name": "test-collection",
;      "tier-data": [
;        {
;          "tierId": "free",
;          "accounts": ["bob"]
;        },
;        {
;          "tierId": "discount",
;          "accounts": ["bob", "alice"]
;        }
;      ],
;      "can-offer": true,
;      "can-buy": true,
;      "can-transfer": true,
;      "can-burn": true,
;      "can-xchain": true,
;      "upgrade": false
;    }
;  )

;  ;  (load "kadenai-create.pact")
;  (commit-tx)
(begin-tx)
(env-data
  { 'ns-admin-keyset: []
  , 'ns-genesis-keyset:[]
  , 'ns-operate-keyset:[] })
;  (load "../root/fungible-v2.pact")
;  (load "../root/fungible-xchain-v1.pact")
;  (load "../root/gas-payer-v1.pact")
;  (load "../root/coin.pact")
(env-exec-config ["DisablePact44"])
(load "../marm-v2/marmalade/root/ns.pact")
(commit-tx)

(begin-tx)
(env-data
 { 'marmalade-admin: ["marmalade-admin"]
 , 'marmalade-ns-user: ["marmalade-admin"]
 , 'marmalade-ns-admin: ["marmalade-admin"]
 , 'ns: "marmalade"
 , 'upgrade: false })
 (env-sigs [
   { 'key: 'marmalade-admin
    ,'caps: []
    }])
(load "../marm-v2/marmalade/ns-marmalade.pact")
(env-data
 { 'marmalade-admin: ["marmalade-admin"]
 , 'marmalade-ns-user: ["marmalade-admin"]
 , 'marmalade-ns-admin: ["marmalade-admin"]
 , 'ns: "marmalade"
 , 'upgrade: true })
;  (load "./marm-v2/marmalade/concrete-policies/fungible-quote-policy/fungible-quote-policy-interface-v1.pact")
(load "../marm-v2/marmalade/policy-manager/policy-manager.pact")
(load "../marm-v2/marmalade/ledger.pact")
(commit-tx)

(begin-tx "load concrete-polices")
(load "../marm-v2/marmalade/concrete-policies/fungible-quote-policy/fungible-quote-policy-v1.pact")
(load "../marm-v2/marmalade/concrete-policies/non-fungible-policy/non-fungible-policy-v1.pact")
(load "../marm-v2/marmalade/concrete-policies/royalty-policy/royalty-policy-v1.pact")
(load "../marm-v2/marmalade/concrete-policies/collection-policy/collection-policy-v1.pact")

(use kip.token-policy-v2 [QUOTE_POLICY NON_FUNGIBLE_POLICY ROYALTY_POLICY COLLECTION_POLICY])
(marmalade.policy-manager.init (marmalade.ledger.ledger-guard))
(marmalade.policy-manager.add-concrete-policy QUOTE_POLICY marmalade.fungible-quote-policy-v1)
(marmalade.policy-manager.add-concrete-policy NON_FUNGIBLE_POLICY marmalade.non-fungible-policy-v1)
(marmalade.policy-manager.add-concrete-policy ROYALTY_POLICY marmalade.royalty-policy-v1)
(marmalade.policy-manager.add-concrete-policy COLLECTION_POLICY marmalade.collection-policy-v1)

(commit-tx)

(begin-tx "Load concrete-policy-config")

(use kip.token-policy-v2 [QUOTE_POLICY NON_FUNGIBLE_POLICY ROYALTY_POLICY COLLECTION_POLICY])
(module util GOV
  (defcap GOV () true)

  (defconst DEFAULT_CONCRETE_POLICY:object{kip.token-policy-v2.concrete-policy}
    { 'quote-policy: true
     ,'non-fungible-policy: true
     ,'royalty-policy: false
     ,'collection-policy:true
    }
  )
  (defconst DEFAULT_POLICIES:object{kip.token-policy-v2.token-policies}
    { 'concrete-policies:DEFAULT_CONCRETE_POLICY
     ,'immutable-policies: []
     ,'adjustable-policies:[]
    })
)

(commit-tx)


(begin-tx "load collection policy")
(env-data
  { 'marmalade-admin: ["marmalade-admin"]
  , 'marmalade-ns-user: ["marmalade-admin"]
  , 'marmalade-ns-admin: ["marmalade-admin"]
  , 'ns: "marmalade"
  , 'upgrade: false })
  (load "../marm-v2/marmalade/concrete-policies/collection-policy/collection-policy-v1.pact")
(commit-tx)

(begin-tx "create collection")

(env-keys ["ku-admin" "ku-ops" "ku-bank" "creatorGuard"])
(env-data
  {
    "ku-admin": {
      "keys": [
        "ku-admin"
      ],
      "pred": "keys-any"
    },
    "ku-ops": {
      "keys": [
        "ku-ops"
      ],
      "pred": "keys-any"
    },
    "ku-bank": {
      "keys": [
        "ku-bank"
      ],
      "pred": "keys-all"
    },
    "bank-guard": {
      "keys": [
        "ku-admin"
      ],
      "pred": "keys-all"
    },
    "creatorGuard": {
        "keys": [ "creatorGuard" ],
        "pred": "keys-any"
      },
      ;  "tokens": [
      ;    "b7NtuI31vzDOswYTO4Bce1ZYuAPnkZkKrA70ijUrFOc",
      ;    "xuj5sc-cG6psRv2XFADyY440k3DvOEKM9Ex9MzTjMJU",
      ;    "VPkB4h_fRpGob_vq5Y5QyxAS9moK_TdTMJqr4L7kzp0",
      ;    "RNhq8SNX_CjShYNMA9qCJc4Cpwm7L9M74roMdvf2x7o",
      ;    "vV9aH_kffmoAZzWnHXzEtK4MKwYxltzkJHUI8v_k4DI",
      ;    "HHQ9J4FMXY1kxEz5OMPT3gGgEvskwtMHxCiruh5bUU8",
      ;    "xy4LicsyGwG7b5ei2ZvYq38kJ0HtHw4GG838uCysKoY",
      ;    "uTApseZiG0zg-Pg3qMICnVZuxIzgk3Jhpus7YdgkBuY",
      ;    "4LknmvOWrG9XVs-jBRIU6zwa3JCx-XuNJPUJGCQ25J4",
      ;    "c1B-xYi8t30s9JqufGDWKY_l1Ah3aj6xGwSVKEk9GMw"
      ;  ],
      "tokens": [
        "t:8-MkQgwqJ0j5nxpkRs0YYZkRmYZhCN1awxve4i7SuxU",
        "t:QS5-JZvA2ZbKa4hesCtsMeV_ak3sEUWZFpr-3svlVcE",
        "t:WB0WneAuhXftRLzNFvRFaW-M4JNIoh-wU1IvLMZMjz0"
        ],
    "collection": {
      "name": "test-collection",
      "totalSupply": 3.0,
      "provenance": "abc",
      "category": "Artwork",
      "creator": "bob",
      "provenance": "EoHS7a0lESX6j7bVmF-CdiCX8z_EUCuSTsq1DptmneU",
      "creatorGuard": {
        "keys": [ "creatorGuard" ],
        "pred": "keys-any"
      },
      "description": "test-description",
      "tiers": [
         {
          "tierId": "public",
          "tierType": "PUBLIC",
          "startTime": {"time": "2023-01-03T00:00:00Z"},
          "endTime": {"time": "2024-01-03T00:00:00Z"},
          "cost": 50.0,
          "limit": -1.0
        }
      ]
    },
    "collection-name": "test-collection",
    "tier-data": [
      {
        "tierId": "free",
        "accounts": ["bob"]
      },
      {
        "tierId": "discount",
        "accounts": ["bob", "alice"]
      }
    ],
    "can-offer": true,
    "can-buy": true,
    "can-transfer": true,
    "can-burn": true,
    "can-xchain": true,
    "upgrade": false
  }
)
(load "kadenai-create.pact")


;  (use marmalade.collection-policy-v1)
(env-gasmodel "table") (env-gaslimit 180000) (env-gas 0) (free.kadenai-create.create-collection (read-msg 'collection) coin (read-msg 'tokens))  (env-gas)


(commit-tx)


(begin-tx "Add Bank Account")
(env-keys ["ku-ops"])
(coin.create-account "BANK" (read-keyset "ku-bank"))
(free.kadenai-create.update-bank "BANK" "BANK")
 (commit-tx)


(begin-tx "Alice Mint")
(env-chain-data { "block-time": (time "2023-01-03T20:00:00Z")})
(env-keys ["alice-key"])
(env-sigs
[{
  "key": "alice-key",
  "caps": [
      (coin.TRANSFER "alice" (free.kadenai-create.get-SPLITTER-account) 50.0)
  ]
}])

(free.kadenai-create.mint "test-collection" "alice" 1 ["bankAc","creator"])
;  (env-gas "table")
(expect-that "Amounts were transferred"
  (= [950.0 5.0 1045.0])
  [
    (coin.get-balance "alice")
    (coin.get-balance "BANK")
    (coin.get-balance "bob")
  ]
)

(commit-tx)


 
;  (begin-tx "Gas Testing")
;    (env-gasmodel "table") (env-gaslimit 10000) (env-gas 0) (marmalade.collection-policy-v1.get-collection "test-collection")  (env-gas)
;  (commit-tx)

(begin-tx "Load ledger")
(use marmalade.ledger)
(use marmalade.policy-manager)

(env-data {
  "token-id": (create-token-id { 'uri: "ipfs://howdydoda/1", 'precision: 0, 'policies: util.DEFAULT_POLICIES } )
 ,"account": "account"
 ,"mint-guard": {"keys": ["account"], "pred": "keys-all"}
 , "collection-id": "test-collection" 
  })
  ;  (marmalade.ledger.create-token (read-msg 'token-id) 0 "test-uri" util.DEFAULT_POLICIES )
  (commit-tx)

  (begin-tx "mint")
  (use marmalade.ledger)
(use marmalade.policy-manager)
(env-keys ["ku-ops"])

  (env-sigs [
    { 'key: 'alice
     ,'caps: [(marmalade.ledger.MINT (create-token-id { 'uri: "ipfs://howdydoda/1", 'precision: 0, 'policies: util.DEFAULT_POLICIES }) "alice" 1.0)]
     }])
     (env-data {
      "token-id": (create-token-id { 'uri: "ipfs://howdydoda/1", 'precision: 0, 'policies: util.DEFAULT_POLICIES } )
     ,"account": "alice"
     ,"mint-guard": {"keys": ["alice"], "pred": "keys-all"}
     , "collection-id": "test-collection"
      })
    
      ;  (expect "create a default token with quote-policy, non-fungible-policy"
      ;  true
      ;  (free.kadenai-minter.mint "bob" "ipfs://howdydoda" 0 util.DEFAULT_POLICIES ))
      (free.kadenai-create.create-marmalade-token "alice" "ipfs://howdydoda/1" 0 util.DEFAULT_POLICIES )
  ;  (expect "create a default token with quote-policy, non-fungible-policy"
  ;    true
  ;    (create-token (read-msg 'token-id) 0 "test-uri" util.DEFAULT_POLICIES ))
  
  ;  (expect "mint a default token with quote-policy, non-fungible-policy"
  ;    true
  ;    (marmalade.ledger.mint (read-msg 'token-id )  (read-msg 'account ) (read-keyset 'mint-guard ) 1.0))
  (commit-tx)

;  (hash { "uri": "ipfs://howdydoda/1", "precision": 0, "policies": util.DEFAULT_POLICIES})
;  (hash { "uri": "ipfs://howdydoda/2", "precision": 0, "policies": util.DEFAULT_POLICIES})
;  (hash { "uri": "ipfs://howdydoda/3", "precision": 0, "policies": util.DEFAULT_POLICIES})

;  (hash [
;  "t:8-MkQgwqJ0j5nxpkRs0YYZkRmYZhCN1awxve4i7SuxU",
;  "t:QS5-JZvA2ZbKa4hesCtsMeV_ak3sEUWZFpr-3svlVcE",
;  "t:WB0WneAuhXftRLzNFvRFaW-M4JNIoh-wU1IvLMZMjz0"])

;  "emjZIM8krClpC5L8B33vAu8LD7zdap-m2uXM1a9jQbk"
; "EoHS7a0lESX6j7bVmF-CdiCX8z_EUCuSTsq1DptmneU"